
static def printlnEx(log) {
    System.out.println("mavenCentral-upload > " + log)
}

apply plugin: "maven-publish"
apply plugin: "signing"




group = myPublishedGroupId
version = myLibraryVersion

def isAndroid = project.hasProperty("android")

printlnEx("isAndroid: " + isAndroid)


//def properties = new Properties()
//properties.load(project.rootProject.file("local.properties").newDataInputStream())
//def userName = properties.getProperty("bintray.user")
//def apiKey = properties.getProperty("bintray.apiKey")



//签名
//signing {
//    required { gradle.taskGraph.hasTask("publish") }
//    sign configurations.archives
//}

if (isAndroid) {
    task sourcesJar(type: Jar) {
        getArchiveClassifier().set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

//    task androidJavaDocsJar(type: Jar, dependsOn: javadoc) {
//        getArchiveClassifier().set("javadoc")
////        options.encoding = "UTF-8"
//        from javadoc.destinationDir
//    }

} else {
    java{
        withJavadocJar()
        withSourcesJar()
    }
}

tasks.withType(Javadoc) {
    //fixed unknow tag error
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

//bintray {
//    user = userName
//    key = apiKey
//    publications = ['bintrayPublication']
//    pkg {
//        repo = myBintrayRepo
//        name = myBintrayName
//        desc = myLibraryDescription
//        websiteUrl = mySiteUrl
//        vcsUrl = myGitUrl
//        licenses = [myAllLicenses]
//        publicDownloadNumbers = true
//        publish = true
//        version {
//            desc = myLibraryDescription
//        }
//    }
//}

printlnEx(ossrhUsername)
printlnEx(ossrhPassword)
printlnEx(project.getProperties().get("signing.keyId"))

publishing {

    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
//            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"

            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

//    repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
//        authentication(userName: ossrhUsername, password: ossrhPassword)
//    }

//    snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
////        authentication(userName: ossrhUsername, password: ossrhPassword)
//    }

    publications {
        sonatypePublication(MavenPublication) {
            //wrap with afterEvaluate,or no components found
            project.afterEvaluate {
                artifactId = myArtifactId
                if (isAndroid) {
                    artifact sourcesJar
//                    artifact androidJavaDocsJar
                    from components.debug
                }else{
                    from components.java
                }
            }

            pom {
                name = myLibraryName
                description = myLibraryDescription
                url = mySiteUrl
                licenses {
                    license {
                        name = myLicenseName
                        url = myLicenseUrl
                    }
                }
                developers {
                    developer {
                        id = myDeveloperId
                        name = myDeveloperName
                        email = myDeveloperEmail
                    }
                }
                scm {
                    connection = myGitUrl
                    developerConnection = myGitUrl
                    url = mySiteUrl
                }
            }
        }
    }
}

signing{
    sign publishing.publications.sonatypePublication
}